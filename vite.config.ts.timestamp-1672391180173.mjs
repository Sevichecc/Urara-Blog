// vite.config.ts
import { defineConfig } from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/vite@4.0.3_@types+node@18.11.18/node_modules/vite/dist/node/index.js";
import UnoCSS from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/unocss@0.48.0_vite@4.0.3/node_modules/unocss/dist/vite.mjs";
import { presetTagify, presetIcons, extractorSvelte } from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/unocss@0.48.0_vite@4.0.3/node_modules/unocss/dist/index.mjs";
import { SvelteKitPWA } from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/@vite-pwa+sveltekit@0.1.1_g44reapwivs7njcwlqiaafvh4a/node_modules/@vite-pwa/sveltekit/dist/index.mjs";
import { sveltekit } from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/@sveltejs+kit@1.0.1_svelte@3.55.0+vite@4.0.3/node_modules/@sveltejs/kit/src/exports/vite/index.js";
import TailwindCSS from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/tailwindcss@3.2.4_postcss@8.4.20/node_modules/tailwindcss/lib/index.js";

// src/lib/config/general.ts
var theme = [
  {
    name: "lemonade",
    text: "Light"
  },
  {
    name: "dracula",
    text: "Dark"
  },
  {
    name: "cupcake",
    text: "Cupcake"
  },
  {
    name: "valentine",
    text: "Valentine"
  },
  {
    name: "aqua",
    text: "Aqua"
  },
  {
    name: "synthwave",
    text: "Synthwave"
  },
  {
    name: "night",
    text: "Night"
  },
  {
    name: "lofi",
    text: "Lo-Fi"
  },
  {
    name: "garden",
    text: "Garden"
  },
  {
    name: "cmyk",
    text: "CMYK"
  },
  {
    name: "retro",
    text: "Retro"
  },
  {
    name: "black",
    text: "Black"
  }
];

// tailwind.config.ts
import typography from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/@tailwindcss+typography@0.5.8_tailwindcss@3.2.4/node_modules/@tailwindcss/typography/src/index.js";
import daisyui from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/daisyui@2.46.0_r4gnkvssmvyxmi2wmat5xbx36a/node_modules/daisyui/src/index.js";
var tailwind_config_default = {
  content: ["./src/**/*.{html,md,js,svelte,ts}"],
  theme: { extend: {} },
  plugins: [typography, daisyui],
  daisyui: { themes: theme.map(({ name }) => name) }
};

// vite.config.ts
import autoprefixer from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/autoprefixer@10.4.13_postcss@8.4.20/node_modules/autoprefixer/lib/autoprefixer.js";
import cssnano from "file:///Users/seviche/Desktop/Urara-Blog/node_modules/.pnpm/cssnano@5.1.14_postcss@8.4.20/node_modules/cssnano/src/index.js";
var vite_config_default = defineConfig({
  envPrefix: "URARA_",
  css: {
    postcss: {
      plugins: [
        TailwindCSS(tailwind_config_default),
        autoprefixer(),
        ...process.env.NODE_ENV === "production" ? [
          cssnano({
            preset: ["default", { discardComments: { removeAll: true } }]
          })
        ] : []
      ]
    }
  },
  plugins: [
    UnoCSS({
      include: [/\.svelte$/, /\.md?$/, /\.ts$/],
      extractors: [extractorSvelte],
      presets: [
        presetTagify({
          extraProperties: (matched) => matched.startsWith("i-") ? { display: "inline-block" } : {}
        }),
        presetIcons({ scale: 1.5 })
      ]
    }),
    sveltekit(),
    SvelteKitPWA({
      registerType: "autoUpdate",
      manifest: false,
      scope: "/",
      workbox: {
        globPatterns: ["posts.json", "**/*.{js,css,html,svg,ico,png,webp,avif}"],
        globIgnores: ["**/sw*", "**/workbox-*"]
      }
    })
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
