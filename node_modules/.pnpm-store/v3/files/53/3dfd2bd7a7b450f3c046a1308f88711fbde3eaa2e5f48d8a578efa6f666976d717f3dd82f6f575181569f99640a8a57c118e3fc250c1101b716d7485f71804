/** Object Image */
declare type FFFImage = Partial<HTMLImageElement> & {
    source?: Partial<HTMLSourceElement>[];
    figcaption?: string;
};
/** Object Audio */
declare type FFFAudio = Partial<HTMLAudioElement> & {
    source?: Partial<HTMLSourceElement>[];
};
/** Object Video */
declare type FFFVideo = Partial<HTMLVideoElement> & {
    source?: Partial<HTMLSourceElement>[];
};
/** Author */
declare type FFFAuthor = {
    /** the author's name. */
    name: string;
    /** the URL of a site owned by the author. */
    url?: string;
    /** the URL for an image for the author. */
    avatar?: string;
};
/** Base Variables */
declare type FFFBase = {
    /** the title of article, non-article posts may omit titles. */
    title?: string;
    /** plain text sentence or two describing the post. */
    summary?: string;
    /** the created date of the post. */
    created?: string;
    /** the updated date of the post. */
    updated?: string;
    /** the published date of the post. */
    published?: string;
    /** the featured image for article, or image for "photo" / "multi-photo" posts. */
    image?: string | FFFImage | (string | FFFImage)[];
    /** the main audio for "audio" post. */
    audio?: string | FFFAudio;
    /** the main video for "video" post. */
    video?: string | FFFVideo;
    /** tags array, any plain text values you want. */
    tags?: string[];
    /** flags array, any plain text values you want. */
    flags?: string[];
};
/** Extra Variables */
declare type FFFExtra = {
    /** specifies one or more post authors. */
    authors?: FFFAuthor[];
    /** the primary language for the post. */
    lang?: string;
    /** location the post was posted from. */
    location?: string;
    /** indicates this post is a bookmark of another URL. */
    bookmark_of?: string;
    /** the URL which the post is considered a "like" (favorite, star) of. */
    like_of?: string;
    /** the URL which the post is considered a "repost" of. */
    repost_of?: string;
    /** URL(s) which the post is considered reply to. */
    in_reply_to?: string | string[];
    /** URL(s) of syndicated copies of this post. */
    syndication?: string | string[];
};
/** FFF Flavored Frontmatter */
declare type FFFFlavoredFrontmatter = FFFBase & FFFExtra;

export { FFFAudio, FFFAuthor, FFFBase, FFFExtra, FFFFlavoredFrontmatter, FFFImage, FFFVideo };
